@page "/"
@using System.Linq.Expressions

<FluentDesignTheme @bind-Mode="@Mode"
                   @bind-OfficeColor="@OfficeColor" 
                   StorageName="theme" />
<style>
    th, td {
        padding: 0.5rem;
    }
</style>

<PageTitle>Home</PageTitle>

<h1>Hello, world! </h1>

Welcome to your new Fluent Blazor app.

@{
    Expression<Func<double, double>> cos = x => System.Math.Cos(x);
    Expression<Func<double, double>> sin = x => System.Math.Sin(x);
    Expression<Func<double, double, double>> expr =
        add ? (Expression<Func<double, double, double>>)Expression.Lambda<Func<double, double, double>>(
            Expression.Add(cos.Body, sin.Body),
            cos.Parameters[0],
            sin.Parameters[0]
        ) : (Expression<Func<double, double, double>>)Expression.Lambda<Func<double, double, double>>(
            Expression.Subtract(cos.Body, sin.Body),
            cos.Parameters[0],
            sin.Parameters[0]
        );
    var f = expr.Compile();
}

<table>
    <tr>
        <td>x: </td>
        <td><input type="number" @bind="x" /></td>
    </tr>
    <tr>
        <td>y: </td>
        <td><input type="number" @bind="y" /></td>
    </tr>
    <tr>
        <td>add / subtract: </td>
        <td><input type="checkbox" @bind="add" /></td>
    </tr>
    <tr>
        <td>result (@expr.ToString()) </td>
        <td>@(result = f(x, y))</td>
    </tr>
</table>

<div style="min-height: 250px;">
    <FluentGrid>
        <FluentGridItem>
            <FluentSelect Label="Theme"
                          Width="250px"
                          Items="@(Enum.GetValues<DesignThemeModes>())"
                          @bind-SelectedOption="@Mode" />
        </FluentGridItem>

        <FluentGridItem>
            <FluentSelect Label="Color"
                          Items="@(Enum.GetValues<OfficeColor>().Select(i => (OfficeColor?)i))"
                          Height="200px"
                          Width="250px"
                          @bind-SelectedOption="@OfficeColor">
                <OptionTemplate>  
                    <FluentStack>
                        <FluentIcon Value="@(new Icons.Filled.Size20.RectangleLandscape())"
                                    Color="Color.Custom"
                                    CustomColor="@(@context.ToAttributeValue() != "default" ? context.ToAttributeValue() : "#036ac4" )" />
                        <FluentLabel>@context</FluentLabel>  
                    </FluentStack>
                </OptionTemplate> 
            </FluentSelect>
        </FluentGridItem>
    </FluentGrid>
</div>

@code {
    private bool add = true;
    private double x = 1;
    private double y = 2;
    private double result;

    public DesignThemeModes Mode { get; set; }



    public OfficeColor? OfficeColor { get; set; }
}